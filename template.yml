AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Lambda application that calls the Lambda API.

Resources:
  #This is a Secret resource with a randomly generated password in its SecretString JSON.
  RDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: This is a Secrets Manager secret for RDS DB cluster
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  #This is a RDS cluster that stores data in the Aurora Serverless database.
  RDSCluster:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      DatabaseName: polygbotDB
      MasterUsername: !Sub '{{resolve:secretsmanager:${RDSSecret}::username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${RDSSecret}::password}}'
      DBClusterIdentifier: polygbot-cluster
      Engine: aurora
      EngineVersion: 5.6.10a
      EngineMode: serverless
      ScalingConfiguration:
        AutoPause: true
        MinCapacity: 1
        MaxCapacity: 2
        SecondsUntilAutoPause: 300

  #This is a Secret target attachment that completes the final link between the RDS secret and the RDS cluster.
  SecretAttachment:
    Type: "AWS::SecretsManager::SecretTargetAttachment"
    Properties:
      SecretId: !Ref RDSSecret
      TargetId: !Ref RDSCluster
      TargetType: AWS::RDS::DBCluster

  #This is an API Gateway with a Lambda Integration.
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: An API Gateway with a Lambda Integration
      EndpointConfiguration:
        Types:
          - EDGE
      Name: polygbot-api

  #This is an API Gateway resource.
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'polygbot'
      RestApiId: !Ref ApiGatewayRestApi

  #This is an API Gateway method.
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
      OperationName: 'polygbot'
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi

  #This is an API Gateway model.
  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: { }

  #This is an API Gateway stage.
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'v0'

  #This is an API Gateway deployment.
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  #This is an API Gateway IAM role.
  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'ApiGatewayIamRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt LambdaFunction.Arn

  #This is a Lambda function.
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'polygbot-function'
      Description: Java function
      Runtime: java8
      CodeUri: build/distributions/polygbot-1.0-SNAPSHOT.zip
      Handler: com.alexeykovzel.RequestHandler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 12
      Tracing: Active
      Layers:
        - !Ref Libs

  #This is a Lambda execution role.
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'LambdaExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSLambdaReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Path: '/'

  #This is a Lambda function version.толерантная
  Version:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref LambdaFunction
      Description: v0

  #These are Lambda function libs.
  Libs:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: polygbot-lib
      Description: Dependencies for the polygbot app.
      ContentUri: build/polygbot-lib.zip
      CompatibleRuntimes:
        - java8